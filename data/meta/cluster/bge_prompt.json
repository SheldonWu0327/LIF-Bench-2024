{
  "repeat": [
    "Provide {num} KEY SENTENCE and their categories directly. Display the output on {num} individual lines with each line containing a KEY SENTENCE and its category, separated by {sep}. \nOutput example:\n[KEY_SENTENCE_1] {sep} [type_1]\n[KEY_SENTENCE_2] {sep} [type_2]",
    "Determine {num} KEY sentences and their related categories. Present the output in {num} lines, each containing a sentence followed by its category, divided by '{sep}'. \nOutput example:\n[KEY_SENTENCE_1] {sep} [type_1]\n[KEY_SENTENCE_2] {sep} [type_2]",
    "Deliver {num} KEY SENTENCE alongside their types instantly. Arrange the output into {num} distinct lines, each showing a KEY SENTENCE and its type, split by {sep}. \nOutput example:\n[KEY_SENTENCE_1] {sep} [type_1]\n[KEY_SENTENCE_2] {sep} [type_2]",
    "Identify {num} essential sentences and their associated types. Format the output as {num} lines, where each line features a sentence and its type, delimited by '{sep}'. \nOutput example:\n[KEY_SENTENCE_1] {sep} [type_1]\n[KEY_SENTENCE_2] {sep} [type_2]",
    "Generate {num} key sentences and their corresponding classifications. Divide the output into {num} lines, with each line featuring a sentence and its classification, distinguished by '{sep}'. \nOutput example:\n[KEY_SENTENCE_1] {sep} [type_1]\n[KEY_SENTENCE_2] {sep} [type_2]"
  ],
  "blur_offset_query_id": [
    "Taking into account the anterior record, random duplicate an element following the {ordid} element.",
    "After the {ordid} item in the list above, randomly repeat one of the elements.",
    "Considering the foregoing enumeration, unsystematically echo an element ensuing the {ordid} element.",
    "Randomly select an item from the list above, after the {ordid} element.",
    "Taking into account the preceding inventory, repeat a component succeeding the {ordid} item."
  ],
  "multi_query_id": [
    "Please provide the elements located at the respective indices specified in the list {id_arr}, and return the result in the format of a JSON list.",
    "Identify the items at the corresponding places in list {id_arr} and deliver the result in JSON list form.",
    "Acquire the components found at the respective positions denoted in the list {id_arr}, and deliver the findings as a JSON list.",
    "What elements appear at the specific positions in {id_arr}? Please format the answer as a JSON list.",
    "Collect the items occupying the matching positions denoted in the list {id_arr}, and provide the result structured in a JSON list."
  ],
  "qa": [
    "Is the sentence \"{evidence}\" the CRUCIAL one? Use \"{options[0]}\" if it is, and \"{options[1]}\" if it isn't.",
    "Determine if the sentence \"{evidence}\" expresses the PRINCIPAL CONCEPT. Reply \"{options[0]}\" if it does, or \"{options[1]}\" if it doesn't.",
    "Determine if \"{evidence}\" is the PRIMARY SENTENCE. If affirmative, respond with \"{options[0]}\"; if negative, use \"{options[1]}\".",
    "Is the phrase \"{evidence}\" the KEY SENTENCE? Reply with \"{options[0]}\" for yes and \"{options[1]}\" for no.",
    "Is \"{evidence}\" the KEY SENTENCE of the text? Indicate \"{options[0]}\" for yes, \"{options[1]}\" for no."
  ],
  "extract": [
    "Gather every instance of KEY SENTENCE classified as {type}. The output should be a Json list arranged by ids. If none are found, provide an empty array. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
    "Collect all KEY SENTENCE that belong to the {type} type. List them in a Json array ordered by ids. If no such sentences exist, return an empty list. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
    "Identify and retrieve all instances of KEY SENTENCE belonging to {type}. Structure the results as a Json list, ordered by ids. In case no KEY SENTENCE of the given type is present, output an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
    "Discover and gather all occurrences of KEY SENTENCE that correspond to {type}. Arrange the results in a Json list format, sorted based on ids. In case no KEY SENTENCE instances of the specified type are found, output an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
    "Extract all KEY SENTENCE that pertain to the {type} classification. Present them ordered by ids in a Json list. If none are found, return an empty array. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []"
  ],
  "blur_offset_query_element": [
    "From the preceding list, choose an element at random that succeeds the item \"{element}\" and provide it as the output.",
    "Based on the list above, randomly output a element that comes after the element \"{element}\".",
    "Based on the preceding list, randomly pick an element that follows \"{element}\".",
    "Considering the list above, generate a randomized result consisting of an element that immediately follows \"{element}\".",
    "Referencing the above list, yield a randomized output after the given element \"{element}\"."
  ],
  "find_dup_text": [
    "Within the supplied documents, certain documents contain replicated content in their 'text' field, although other fields (such as id, iD2, date, title, source) may be different. Additionally, there could be N sets of documents, each set comprising any number of replicates. Please identify these replicated documents and present {info_text} in sequence. The output should have N lines, each line symbolizing a set of replicated documents. Format the output for each document set as depicted in the example. Avoid providing explanations. If a document lacks information in a specific field, use 'None' instead.\noutput example:\n{example}",
    "Among the listed documents, some have duplicated content. These duplicates possess the same 'text' field but may have different other fields (like id, iD2, date, title, source). Furthermore, there could be N groups, each containing several duplicates. Identify these duplicate documents and provide {info_text} in sequence. The final output will be N lines, each representing a group of duplicates. Format each group as shown in the example. Use 'None' for any missing field data.\noutput example:\n{example}",
    "In the given collection, some documents are duplicated. These documents share the 'text' field, but other fields (such as id, iD2, date, title, source) may vary. Additionally, there could be N groups, each representing duplicate documents . Identify these duplicates and output {info_text} sequentially. The final output will have N lines, each representing one group of duplicates. Follow the format from the example. Replace missing fields with 'None'.\noutput example:\n{example}",
    "Among the provided documents, there are instances where multiple documents have identical content in their 'text' field, while other fields (including id, iD2, date, title, source) might vary. Moreover, there may be N clusters of documents, each cluster containing any quantity of duplicates. Please locate these duplicated documents and display {info_text} sequentially. The resulting output should consist of N lines, with each line signifying a cluster of duplicated documents. Arrange the output for each document cluster as demonstrated in the example. Refrain from including explanations. If a document has missing data in a particular field, replace it with 'None'.\noutput example:\n{example}",
    "Within the provided collection of documents, certain documents have identical content in their 'text' field, while other fields (e.g., id, iD2, date, title, source) might differ. Additionally, there may exist N clusters of documents, each cluster containing any number of identical documents. Please detect these identical documents and display {info_text} sequentially. The output should consist of N lines, each line representing a cluster of identical documents. Structure the output for each document cluster as shown in the example. Omit any explanations. If a document is missing data in a particular field, replace it with 'None'.\noutput example:\n{example}"
  ],
  "offset_query_element": [
    "Considering the arrangement of the list, what is the next element after {element}?",
    "Analyzing the order of elements, what element comes directly after the {element} in the list above?",
    "In the list above, what is the next element to {element}?",
    "What is the next item listed after the {element} in the list above?",
    "Looking at the list above, can you output the next one after {element}?"
  ],
  "batch_label": [
    "Assign labels to documents in order using the provided list of {candidates}. The labeling rules to follow are: {rules}. The tags should be output in JSON dictionary format, for example: {{\"doc1\":\"{candidates[0]}\",\"doc2\":\"{candidates[1]}\"}}.",
    "Label documents in a sequence, choosing from the list of {candidates}. Adhere to these labeling rules: {rules}. Provide the labels in JSON dictionary format as displayed: {{\"doc1\":\"{candidates[0]}\",\"doc2\":\"{candidates[1]}\"}}.",
    "Classify the documents in the given sequence, selecting from the label options {candidates}.\\nThe classification conventions are:\\n{rules}\\nPlease present the classification results in JSON dictionary format, like this example:\\n {{\"doc1\":\"{candidates[0]}\",\"doc2\":\"{candidates[1]}\"}}",
    "Tag the documents in sequential order, selecting from the label candidates {candidates}.\\nThe labeling instructions are:\\n{rules}\\nPlease deliver the tags in JSON dictionary format, following this template:\\n {{\"doc1\":\"{candidates[0]}\",\"doc2\":\"{candidates[1]}\"}}",
    "Categorize the documents in the specified order, using the label candidates {candidates}.\\nThe categorization criteria are:\\n{rules}\\nKindly output the assigned categories in JSON dictionary format, following this template:\\n {{\"doc1\":\"{candidates[0]}\",\"doc2\":\"{candidates[1]}\"}}"
  ],
  "single_query_id": [
    "Retrieve the entry at position {ordid} in the list. Display it immediately.",
    "What is the {ordid} element in the list? Output it directly.",
    "Identify and present the {ordid} item within the list without any modifications.",
    "Which element is found at {ordid} in the list? Present it now.",
    "What is the item at position {ordid} in the array? Display it immediately."
  ],
  "offset_query_id": [
    "Please identify the next item to {ordid} in the list described above.",
    "What is the next item to {ordid} in the list shown above?",
    "Which element is next in {order} in the sequence represented in the list above?",
    "Referencing the list provided above, determine the next item that comes after the {ordid}.",
    "In the list provided above, what is the next element immediately after {ordid}?"
  ]
}