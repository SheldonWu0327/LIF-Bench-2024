{
  "claude-3-opus-20240229": {
    "llm_output": "[\n  \"Identify and extract all KEY SENTENCE instances of {type}. Present the results as a Json list, sorted by ids. If no KEY SENTENCE of the specified type is found, return an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Locate and retrieve all instances of KEY SENTENCE belonging to {type}. Organize the output as a Json list, arranged according to ids. In case no KEY SENTENCE of the given type is present, produce an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Find and extract all occurrences of KEY SENTENCE that match {type}. Display the results in a Json list format, sorted based on ids. If there are no KEY SENTENCE instances of this type, generate an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Identify and collect all KEY SENTENCE entries of {type}. Arrange the output in a Json list, ordered by ids. Should there be no KEY SENTENCE of the specified type, return an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Detect and gather all KEY SENTENCE instances that correspond to {type}. Structure the results as a Json list, sorted according to ids. In the absence of any KEY SENTENCE of this type, output an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Pinpoint and extract all KEY SENTENCE occurrences of {type}. Organize the output into a Json list, arranged by ids. If no KEY SENTENCE of the given type is detected, return an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Discover and retrieve all instances of KEY SENTENCE that belong to {type}. Present the results in a Json list format, sorted based on ids. In case no KEY SENTENCE of the specified type is found, produce an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Locate and extract all KEY SENTENCE entries that match {type}. Display the output as a Json list, ordered according to ids. Should there be no KEY SENTENCE instances of this type, generate an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Identify and gather all occurrences of KEY SENTENCE that correspond to {type}. Arrange the results in a Json list format, sorted by ids. In the absence of any KEY SENTENCE of the given type, return an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Find and collect all instances of KEY SENTENCE belonging to {type}. Structure the output as a Json list, ordered based on ids. If no KEY SENTENCE of the specified type is present, output an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Detect and retrieve all KEY SENTENCE entries that match {type}. Organize the results into a Json list, arranged according to ids. In case no KEY SENTENCE of this type is detected, return an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Pinpoint and gather all occurrences of KEY SENTENCE that belong to {type}. Present the output in a Json list format, sorted by ids. Should there be no KEY SENTENCE instances of the given type, produce an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Discover and extract all KEY SENTENCE instances that correspond to {type}. Display the results as a Json list, ordered based on ids. In the absence of any KEY SENTENCE of the specified type, generate an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Locate and collect all entries of KEY SENTENCE that match {type}. Arrange the output in a Json list format, sorted according to ids. If no KEY SENTENCE of this type is found, return an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Identify and retrieve all instances of KEY SENTENCE belonging to {type}. Structure the results as a Json list, ordered by ids. In case no KEY SENTENCE of the given type is present, output an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Find and gather all occurrences of KEY SENTENCE that correspond to {type}. Organize the output into a Json list, arranged based on ids. Should there be no KEY SENTENCE instances of the specified type, produce an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Detect and collect all KEY SENTENCE entries that match {type}. Present the results in a Json list format, sorted according to ids. In the absence of any KEY SENTENCE of this type, generate an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Pinpoint and retrieve all instances of KEY SENTENCE that belong to {type}. Display the output as a Json list, ordered by ids. If no KEY SENTENCE of the given type is detected, return an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Discover and gather all occurrences of KEY SENTENCE that correspond to {type}. Arrange the results in a Json list format, sorted based on ids. In case no KEY SENTENCE instances of the specified type are found, output an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\",\n  \"Locate and extract all KEY SENTENCE entries belonging to {type}. Structure the output as a Json list, ordered according to ids. Should there be no KEY SENTENCE of this type present, produce an empty list.\\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\\nOutput Example 2: []\"\n]",
    "parse_result": [
      "Identify and extract all KEY SENTENCE instances of {type}. Present the results as a Json list, sorted by ids. If no KEY SENTENCE of the specified type is found, return an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Locate and retrieve all instances of KEY SENTENCE belonging to {type}. Organize the output as a Json list, arranged according to ids. In case no KEY SENTENCE of the given type is present, produce an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Find and extract all occurrences of KEY SENTENCE that match {type}. Display the results in a Json list format, sorted based on ids. If there are no KEY SENTENCE instances of this type, generate an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Identify and collect all KEY SENTENCE entries of {type}. Arrange the output in a Json list, ordered by ids. Should there be no KEY SENTENCE of the specified type, return an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Detect and gather all KEY SENTENCE instances that correspond to {type}. Structure the results as a Json list, sorted according to ids. In the absence of any KEY SENTENCE of this type, output an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Pinpoint and extract all KEY SENTENCE occurrences of {type}. Organize the output into a Json list, arranged by ids. If no KEY SENTENCE of the given type is detected, return an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Discover and retrieve all instances of KEY SENTENCE that belong to {type}. Present the results in a Json list format, sorted based on ids. In case no KEY SENTENCE of the specified type is found, produce an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Locate and extract all KEY SENTENCE entries that match {type}. Display the output as a Json list, ordered according to ids. Should there be no KEY SENTENCE instances of this type, generate an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Identify and gather all occurrences of KEY SENTENCE that correspond to {type}. Arrange the results in a Json list format, sorted by ids. In the absence of any KEY SENTENCE of the given type, return an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Find and collect all instances of KEY SENTENCE belonging to {type}. Structure the output as a Json list, ordered based on ids. If no KEY SENTENCE of the specified type is present, output an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Detect and retrieve all KEY SENTENCE entries that match {type}. Organize the results into a Json list, arranged according to ids. In case no KEY SENTENCE of this type is detected, return an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Pinpoint and gather all occurrences of KEY SENTENCE that belong to {type}. Present the output in a Json list format, sorted by ids. Should there be no KEY SENTENCE instances of the given type, produce an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Discover and extract all KEY SENTENCE instances that correspond to {type}. Display the results as a Json list, ordered based on ids. In the absence of any KEY SENTENCE of the specified type, generate an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Locate and collect all entries of KEY SENTENCE that match {type}. Arrange the output in a Json list format, sorted according to ids. If no KEY SENTENCE of this type is found, return an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Identify and retrieve all instances of KEY SENTENCE belonging to {type}. Structure the results as a Json list, ordered by ids. In case no KEY SENTENCE of the given type is present, output an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Find and gather all occurrences of KEY SENTENCE that correspond to {type}. Organize the output into a Json list, arranged based on ids. Should there be no KEY SENTENCE instances of the specified type, produce an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Detect and collect all KEY SENTENCE entries that match {type}. Present the results in a Json list format, sorted according to ids. In the absence of any KEY SENTENCE of this type, generate an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Pinpoint and retrieve all instances of KEY SENTENCE that belong to {type}. Display the output as a Json list, ordered by ids. If no KEY SENTENCE of the given type is detected, return an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Discover and gather all occurrences of KEY SENTENCE that correspond to {type}. Arrange the results in a Json list format, sorted based on ids. In case no KEY SENTENCE instances of the specified type are found, output an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Locate and extract all KEY SENTENCE entries belonging to {type}. Structure the output as a Json list, ordered according to ids. Should there be no KEY SENTENCE of this type present, produce an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []"
    ]
  },
  "gemini-1.5-pro-latest": {
    "llm_output": "",
    "parse_result": ""
  },
  "gpt-4o": {
    "llm_output": "[\n    \"Identify every KEY SENTENCE categorized as {type}. Present them in a Json array sorted by ids. If such a KEY SENTENCE is absent, provide an empty array output.\",\n    \"Please extract all KEY SENTENCE that fall under the {type} category. Organize the output in a Json list based on ids. If no matching KEY SENTENCE exists, return an empty list.\",\n    \"Retrieve all KEY SENTENCE belonging to the {type} classification. Ensure the output is in a Json list, sequenced by ids. If there are no such KEY SENTENCE, output an empty list.\",\n    \"Collect every KEY SENTENCE of type {type} and present them in a Json array ordered by their ids. If no such KEY SENTENCE exist, return an empty array.\",\n    \"Gather all instances of KEY SENTENCE that are of the {type} variety. Display them in a Json list sorted by ids. If there are none, the list should be empty.\",\n    \"Extract every KEY SENTENCE under the {type} category. List them in a Json array in the order of their ids. If no such sentence is found, provide an empty list.\",\n    \"Fetch all KEY SENTENCE categorized as {type}. Output them in sequence based on ids, in a Json list. If there aren't any, the list should be empty.\",\n    \"Please gather every KEY SENTENCE of {type} type. Arrange them in a Json array according to their ids. If there are no such sentences, return an empty list.\",\n    \"Retrieve all KEY SENTENCE that belong to the {type} category. The result should be a Json list ordered by ids. If none exist, return an empty array.\",\n    \"Extract all instances of KEY SENTENCE classified as {type}. Return them in a Json list sorted by ids. If no such sentences are found, provide an empty list.\",\n    \"Identify all KEY SENTENCE that fall under {type}. Display them in a Json array organized by ids. If there are no matching sentences, output an empty list.\",\n    \"Extract all KEY SENTENCE that pertain to the {type} classification. Present them ordered by ids in a Json list. If none are found, return an empty array.\",\n    \"Gather every KEY SENTENCE of the {type} type. Output them in a Json array according to their ids. If no sentences are found, provide an empty list.\",\n    \"Retrieve all instances of KEY SENTENCE under the {type} category. Organize them in a Json list by ids. If none exist, the list should be empty.\",\n    \"Please fetch all KEY SENTENCE that fall into the {type} group. The output should be a Json array in order of ids. If there are no such sentences, it should be an empty list.\",\n    \"Collect all KEY SENTENCE that belong to the {type} type. List them in a Json array ordered by ids. If no such sentences exist, return an empty list.\",\n    \"Gather every instance of KEY SENTENCE classified as {type}. The output should be a Json list arranged by ids. If none are found, provide an empty array.\",\n    \"Identify all KEY SENTENCE within the {type} category. Display them in a Json list sorted according to ids. If no such sentences are present, return an empty list.\",\n    \"Retrieve every KEY SENTENCE that falls under the {type} classification. Present them in a Json array ordered by ids. If none exist, the array should be empty.\",\n    \"Please extract all instances of KEY SENTENCE categorized as {type}. Output them as a Json list in the sequence of ids. If no such sentences are found, the list should be empty.\"\n]",
    "parse_result": [
      "Identify every KEY SENTENCE categorized as {type}. Present them in a Json array sorted by ids. If such a KEY SENTENCE is absent, provide an empty array output. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Please extract all KEY SENTENCE that fall under the {type} category. Organize the output in a Json list based on ids. If no matching KEY SENTENCE exists, return an empty list. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Retrieve all KEY SENTENCE belonging to the {type} classification. Ensure the output is in a Json list, sequenced by ids. If there are no such KEY SENTENCE, output an empty list. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Collect every KEY SENTENCE of type {type} and present them in a Json array ordered by their ids. If no such KEY SENTENCE exist, return an empty array. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Gather all instances of KEY SENTENCE that are of the {type} variety. Display them in a Json list sorted by ids. If there are none, the list should be empty. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Extract every KEY SENTENCE under the {type} category. List them in a Json array in the order of their ids. If no such sentence is found, provide an empty list. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Fetch all KEY SENTENCE categorized as {type}. Output them in sequence based on ids, in a Json list. If there aren't any, the list should be empty. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Please gather every KEY SENTENCE of {type} type. Arrange them in a Json array according to their ids. If there are no such sentences, return an empty list. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Retrieve all KEY SENTENCE that belong to the {type} category. The result should be a Json list ordered by ids. If none exist, return an empty array. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Extract all instances of KEY SENTENCE classified as {type}. Return them in a Json list sorted by ids. If no such sentences are found, provide an empty list. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Identify all KEY SENTENCE that fall under {type}. Display them in a Json array organized by ids. If there are no matching sentences, output an empty list. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Extract all KEY SENTENCE that pertain to the {type} classification. Present them ordered by ids in a Json list. If none are found, return an empty array. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Gather every KEY SENTENCE of the {type} type. Output them in a Json array according to their ids. If no sentences are found, provide an empty list. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Retrieve all instances of KEY SENTENCE under the {type} category. Organize them in a Json list by ids. If none exist, the list should be empty. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Please fetch all KEY SENTENCE that fall into the {type} group. The output should be a Json array in order of ids. If there are no such sentences, it should be an empty list. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Collect all KEY SENTENCE that belong to the {type} type. List them in a Json array ordered by ids. If no such sentences exist, return an empty list. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Gather every instance of KEY SENTENCE classified as {type}. The output should be a Json list arranged by ids. If none are found, provide an empty array. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Identify all KEY SENTENCE within the {type} category. Display them in a Json list sorted according to ids. If no such sentences are present, return an empty list. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Retrieve every KEY SENTENCE that falls under the {type} classification. Present them in a Json array ordered by ids. If none exist, the array should be empty. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Please extract all instances of KEY SENTENCE categorized as {type}. Output them as a Json list in the sequence of ids. If no such sentences are found, the list should be empty. \nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []"
    ]
  },
  "ori": "Extract all KEY SENTENCE of type {type}. Output as a Json list in order of ids. If there is no KEY SENTENCE of this type, output an empty list.\nOutput Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
  "gpt-3.5-turbo": {
    "llm_output": "```json\n[\n    \"Gather every KEY SENTENCE classified as {type}. Present them as a Json list sorted by their ids. If no KEY SENTENCE of this category exists, return an empty list.\",\n    \"Compile all KEY SENTENCES of the type {type}. Display the results as a Json list in order according to their ids. If there are no such KEY SENTENCES, return an empty list.\",\n    \"Collect all KEY SENTENCES under the category {type}. Output these in a Json list, organized by ids. If there are no KEY SENTENCES of this type, provide an empty list.\",\n    \"Retrieve all KEY SENTENCES identified as {type}. Format the output as a Json list sorted by ids. If none are found, return an empty list.\",\n    \"Extract every KEY SENTENCE belonging to the type {type}. Create a Json list in sequence of their ids. If there aren\u2019t any KEY SENTENCES of this type, return an empty list.\",\n    \"Identify all KEY SENTENCES categorized as {type}. Output the results in a Json list arranged by ids. If no such KEY SENTENCES are present, yield an empty list.\",\n    \"Harvest all KEY SENTENCES that fit the description {type}. Present them in a Json list ordered by their ids. In the absence of such KEY SENTENCES, provide an empty list.\",\n    \"Obtain all KEY SENTENCES of type {type}. Show these as a Json list in the order of ids. If there are no KEY SENTENCES of this type, output an empty list.\",\n    \"Collect all KEY SENTENCES that are of the type {type}. Format this as a Json list arranged by ids. If no KEY SENTENCES of this kind exist, return an empty list.\",\n    \"Assemble all KEY SENTENCES defined as {type}. Provide the results in a Json list sorted by their ids. If there are no such KEY SENTENCES, output an empty list.\",\n    \"Secure all KEY SENTENCES categorized under the type {type}. Output them in a Json list in the order of ids. If no KEY SENTENCES of this type are found, issue an empty list.\",\n    \"Fetch all KEY SENTENCES marked as {type}. Display them in a Json list organized by ids. If there are no KEY SENTENCES in this category, present an empty list.\",\n    \"Compile every KEY SENTENCE of type {type}. Provide this as a Json list arranged by ids. If no such KEY SENTENCES exist, output an empty list.\",\n    \"Extract all KEY SENTENCES with the designation {type}. Show these in a Json list, ordered by ids. If there are no KEY SENTENCES of this nature, return an empty list.\",\n    \"Retrieve the complete list of KEY SENTENCES classified as {type}. Format it as a Json list sorted by ids. If there are none available, output an empty list.\",\n    \"Gather all KEY SENTENCES corresponding to type {type}. Output as a Json list in proper id order. If there are no such KEY SENTENCES, provide an empty list.\",\n    \"Identify and extract all KEY SENTENCES that fall under {type}. Display them as a Json list sorted by their ids. If there are none, output an empty list.\",\n    \"Collect every KEY SENTENCE of the type {type}. Present the data as a Json list sorted by ids. If there are no KEY SENTENCES fitting this profile, return an empty list.\",\n    \"Compile a complete list of all KEY SENTENCES of type {type}. Format this as a Json list organized by ids. If no such KEY SENTENCES are available, yield an empty list.\"\n]\n```",
    "parse_result": [
      "Gather every KEY SENTENCE classified as {type}. Present them as a Json list sorted by their ids. If no KEY SENTENCE of this category exists, return an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Compile all KEY SENTENCES of the type {type}. Display the results as a Json list in order according to their ids. If there are no such KEY SENTENCES, return an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Collect all KEY SENTENCES under the category {type}. Output these in a Json list, organized by ids. If there are no KEY SENTENCES of this type, provide an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Retrieve all KEY SENTENCES identified as {type}. Format the output as a Json list sorted by ids. If none are found, return an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Extract every KEY SENTENCE belonging to the type {type}. Create a Json list in sequence of their ids. If there aren\u2019t any KEY SENTENCES of this type, return an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Identify all KEY SENTENCES categorized as {type}. Output the results in a Json list arranged by ids. If no such KEY SENTENCES are present, yield an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Harvest all KEY SENTENCES that fit the description {type}. Present them in a Json list ordered by their ids. In the absence of such KEY SENTENCES, provide an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Obtain all KEY SENTENCES of type {type}. Show these as a Json list in the order of ids. If there are no KEY SENTENCES of this type, output an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Collect all KEY SENTENCES that are of the type {type}. Format this as a Json list arranged by ids. If no KEY SENTENCES of this kind exist, return an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Assemble all KEY SENTENCES defined as {type}. Provide the results in a Json list sorted by their ids. If there are no such KEY SENTENCES, output an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Secure all KEY SENTENCES categorized under the type {type}. Output them in a Json list in the order of ids. If no KEY SENTENCES of this type are found, issue an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Fetch all KEY SENTENCES marked as {type}. Display them in a Json list organized by ids. If there are no KEY SENTENCES in this category, present an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Compile every KEY SENTENCE of type {type}. Provide this as a Json list arranged by ids. If no such KEY SENTENCES exist, output an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Extract all KEY SENTENCES with the designation {type}. Show these in a Json list, ordered by ids. If there are no KEY SENTENCES of this nature, return an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Retrieve the complete list of KEY SENTENCES classified as {type}. Format it as a Json list sorted by ids. If there are none available, output an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Gather all KEY SENTENCES corresponding to type {type}. Output as a Json list in proper id order. If there are no such KEY SENTENCES, provide an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Identify and extract all KEY SENTENCES that fall under {type}. Display them as a Json list sorted by their ids. If there are none, output an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Collect every KEY SENTENCE of the type {type}. Present the data as a Json list sorted by ids. If there are no KEY SENTENCES fitting this profile, return an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []",
      "Compile a complete list of all KEY SENTENCES of type {type}. Format this as a Json list organized by ids. If no such KEY SENTENCES are available, yield an empty list. Output Example 1: [KEY SENTENCE1, KEY SENTENCE2, KEY SENTENCE3,...]\nOutput Example 2: []"
    ]
  }
}